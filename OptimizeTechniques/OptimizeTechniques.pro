TEMPLATE = subdirs

# https://github.com/google/benchmark
# http://quick-bench.com/_adcYxKW_WAhA69bwZTKyeQ-_Ok
# https://godbolt.org/

SUBDIRS += \
    loop_1 \
    loop_index_float \
    struct_pragma \
    swap_vs_my_swap \
    pass_by_val_ref_pointer \
    postpone_declaration \
    init_and_assignment \
    list_of_initialization \
    loop_collapsing \
    loop_fusion \
    loop_unrolling \
    tail_recursion \
    unswitching \
    volatile \
    inline \
    template_recursion \
    cache_1



# -O0: Этот уровень (буква "O" и ноль за ней) отключает оптимизацию полностью
#      и является уровнем по умолчанию, если никакого уровня с префиксом -O не указано
#      в переменных CFLAGS или CXXFLAGS.
#      Это сокращает время компиляции и может улучшить данные для отладки,
#      но некоторые приложения не будут работать должным образом без оптимизации.
#      Эта опция не рекомендуется, за исключением использования в целях отладки.

# -O1: Это наиболее простой уровень оптимизации.
#      Компилятор попытается сгенерировать быстрый, занимающий меньше объема код,
#      без затрачивания наибольшего времени компиляции.
#      Он достаточно простой, но должен всегда выполнять свою работу.

# -O2: Шаг вперед от -O1. Рекомендуемый уровень оптимизации, до тех пор
#      пока не понадобится что-то особенное.
#      -O2 активирует несколько дополнительных флагов вдобавок к флагам,
#      активированных -O1.
#      С параметром -O2, компилятор попытается увеличить производительность кода
#      без нарушения размера, и без затрачивания большого количества времени компиляции.
#      На этом уровне могут быть использованы SSE и AVX,
#      но YMM-регистры не будут использоваться пока не будет включена опция -ftree-vectorize.

# -O3: Это наибольший возможный уровень оптимизации.
#      Включает оптимизации, являющейся дорогостоящей с точки зрения
#      времени компиляции и потребления памяти.
#      Компиляция с -O3 не является гарантированным способом повышения производительности,
#      и на самом деле во многих случаях может привести к замедлению системы
#      из-за больших двоичных файлов и увеличения потребления памяти.
#      -O3 известен также тем, что ломает несколько пакетов в Linux.
#      Использование -O3 не рекомендуется. Хотя, это также включает -ftree-vectorize,
#      и циклы в коде векторизируются и используют регистры AVX YMM.

# -Os: На этом уровне код будет оптимизирован по объему. Он активирует все параметры
#      -O2, которые не приводят к увеличению размера генерируемого кода.
#      Он может быть полезным на компьютерах, которые обладают чрезвычайно
#      ограниченным пространством жесткого диска и/или процессоры с небольшим размером кэша.

# -Og: В GCC 4.8 был введен новый общий уровень оптимизации -Og.
#      Он удовлетворяет потребность в быстрой компиляции и имеет превосходные возможности
#      для отладки, обеспечивая при этом приемлемый уровень производительности
#      во время выполнения. Общий опыт разработки должен быть лучше,
#      чем с уровнем оптимизации по умолчанию -O0.
#      Обратите внимание, что -Og не означает -g, он просто отключает оптимизацию кода,
#      которая может помешать отладке.

# -Ofast: Новое в GCC 4.7, состоит из -O3 плюс -ffast-math, -fno-protect-parens,
#         и -fstack-arrays. Этот параметр нарушает строгое соответствие стандарту,
#         и не рекомендуется для использования.



#? loop_index_float \
